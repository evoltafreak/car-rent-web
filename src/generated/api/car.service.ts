/**
 * OpenAPI ZbW car rent
 * zbw car rent api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { Car } from '../model/car';
import { CarMake } from '../model/carMake';
import { CarType } from '../model/carType';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class CarService {

    protected basePath = 'https://localhost:44363/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }



    /**
     * Add a new car
     * @param car Car object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addCar(car: Car, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addCar(car: Car, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addCar(car: Car, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addCar(car: Car, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (car === null || car === undefined) {
            throw new Error('Required parameter car was null or undefined when calling addCar.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.configuration.basePath}/car`,
            car,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete an existing car
     * @param idCar The id of the car
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteCarById(idCar: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteCarById(idCar: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteCarById(idCar: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteCarById(idCar: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idCar === null || idCar === undefined) {
            throw new Error('Required parameter idCar was null or undefined when calling deleteCarById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.delete<any>(`${this.configuration.basePath}/car/${encodeURIComponent(String(idCar))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Read all car makes
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readAllCarMakes(observe?: 'body', reportProgress?: boolean): Observable<Array<CarMake>>;
    public readAllCarMakes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CarMake>>>;
    public readAllCarMakes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CarMake>>>;
    public readAllCarMakes(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<CarMake>>(`${this.configuration.basePath}/car/carMake`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Read all car types
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readAllCarTypes(observe?: 'body', reportProgress?: boolean): Observable<Array<CarType>>;
    public readAllCarTypes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CarType>>>;
    public readAllCarTypes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CarType>>>;
    public readAllCarTypes(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<CarType>>(`${this.configuration.basePath}/car/carType`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Read all cars
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readAllCars(observe?: 'body', reportProgress?: boolean): Observable<Array<Car>>;
    public readAllCars(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Car>>>;
    public readAllCars(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Car>>>;
    public readAllCars(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<Car>>(`${this.configuration.basePath}/car`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Read car by idCar
     * @param idCar The id of the car
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readCarById(idCar: number, observe?: 'body', reportProgress?: boolean): Observable<Car>;
    public readCarById(idCar: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Car>>;
    public readCarById(idCar: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Car>>;
    public readCarById(idCar: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idCar === null || idCar === undefined) {
            throw new Error('Required parameter idCar was null or undefined when calling readCarById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Car>(`${this.configuration.basePath}/car/${encodeURIComponent(String(idCar))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update an existing car
     * @param car Car object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCar(car: Car, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateCar(car: Car, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateCar(car: Car, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateCar(car: Car, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (car === null || car === undefined) {
            throw new Error('Required parameter car was null or undefined when calling updateCar.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/car`,
            car,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
